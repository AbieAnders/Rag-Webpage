import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;  //type assertion
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!; // Required for inserting vector data

export const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function POST(req: NextRequest) {
  try {
    const { query } = await req.json();
    // Already checking for errors in the frontend but double checking just in case
    if (!query) {
      //return new Response(JSON.stringify({ error: "Query is required" }), { status: 404 });
      return NextResponse.json({ error: "Query is required" }, { status: 400 });
    }

    /*
    const embedding = await getTextEmbedding(scrapedText);
    //const embedding = await getTextEmbedding(scrapedText) as number[];
    // Already checking for errors in the function but double checking just in case
    if (!embedding) {
        return new Response(JSON.stringify({ error: "Failed to generate scraped contents embedding" }), { status: 404 });
    }
    */

    // Converts Float32Array to number[]
    const queryEmbeddingsAsArray = Array.from(query_embeddings);

    const queryVector = `{${queryEmbeddingsAsArray.join(",")}}`; // Supabase uses `{}` for array storage
    // Perform similarity search in Supabase (using pgvector's cosine similarity)
    // Does an rpc call to a function named match_webpages(need to create that function in postgres)
    const { data: matches, error } = await supabase.rpc("match_webpages", {
      query_embedding: queryVector,
      match_threshold: 0.75, // Set a similarity threshold
      match_count: 3,
    });
    if (error) {
      console.error("Search error:", error);
      return new Response(JSON.stringify({ error: "Failed to search embeddings" }), { status: 404 });
    }

    const results = matches?.length > 0 ? matches.map((match: any) => match.text) : ["No relevant data found."];
    return NextResponse.json({ matches: results });

  } catch (error: any) {
    console.error("Query API Error:", error);
    return NextResponse.json({
      error: error.message || "Internal server error",
      stack: process.env.NODE_ENV === "development" ? error.stack : null,
    }, { status: 500 });
  }
}


const hard_coded_query = "How is AI transforming industries?"

const query_embeddings = new Float32Array([
  0.00031936946, -0.026544176, -0.006969503, -0.03537757, 0.043141272, 0.03420727, -0.02444789, 0.016043298, 0.010875999, -0.028020835, -0.04497197, 0.05778697, -0.024801003, 0.006224768, -0.005106464, 0.03471927, -0.059822757, 0.01664926, -0.08856439, -0.08931221, 0.021917235, -0.016059548, -0.03683661, -0.0608215, 0.00986081, 0.07430189, 0.002845023, -0.054755248, -0.015570606, -0.045208585, -0.03631984, 0.05087119, 0.039213635, 0.017091721, -0.0037982783, 0.070815586, 0.014745006, -0.005714767, 0.111078314, -0.018127149, 0.053850677, -0.11243832, -0.06108691, -0.098918386, 0.105710134, 0.03911516, 0.029692605, -0.019610856, 0.032838244, 0.006692408, -0.14313887, -0.020857388, 0.012107741, 0.026063912, -0.056080595, 0.03172844, 0.034458544, -0.02142911, 0.015824992, 0.0048647393, 0.06870722, -0.02157444, 0.037581, 0.029737933, 0.06918521, -0.036878683, -0.059854403, 0.00809678, -0.110788785, -0.055945866, 0.054348797, -0.029314598, -0.06367323, -0.02682935, 0.021996148, -0.07850393, -0.010009004, 0.020241005, 0.12084361, -0.059377175, 0.059753, -0.019188192, -0.019915808, 0.070449166, -0.025823163, 0.022558978, 0.002579769, -0.066358894, 0.04391269, 0.013871313, -0.052148335, -0.0596478, -0.01891325, 0.012068484, 0.06578708, 0.051460665, -0.09019365, -0.052727774, 0.05512938, 0.034816634, -0.03412037, 0.023230566, -0.015569869, -0.10828264, -0.06930011, 0.011966373, 0.03930298, 0.04078442, 0.0150441, 0.038957436, -0.04579074, 0.028431932, 0.028964976, -0.05321246, 0.0584615, -0.018282373, -0.012056475, 0.08465149, -0.024838299, 0.044627268, -0.0019018931, 0.025222804, 0.0065989443, 0.12326234, -0.0033009313, 0.058489166, -0.08039279, -5.439214e-33, -0.114496805, 0.011574119, 0.048317682, 0.054855734, 0.006667425, -0.06033006, -0.0021705122, 0.005626231, 0.01431268, -0.03669735, -0.066747464, 0.100371055, 0.009697044, 0.041887876, 0.090750866, -0.11979861, -0.029862326, 0.012165323, 0.07732222, -0.020008668, 0.0099748755, -0.0006998039, -0.0049455096, 0.019735385, 0.0145313125, 0.035570648, -0.019079369, -0.010216997, 0.04054733, 0.0071111405, 0.027906654, 0.082394995, -0.087889954, -0.02636366, -0.021056358, 0.015563279, -0.033683944, -0.014397537, -0.029026723, 0.11918178, -0.037945606, 0.020443965, -0.03563586, -0.027808769, 0.025414256, 0.08408776, 0.05163983, 0.0034893828, -0.021490976, -0.043324944, -0.046913564, 0.065128736, 0.021011041, -0.10310328, 0.0848545, -0.005276259, -0.009795686, -0.06902245, 0.0030107896, -0.012741149, 0.0072813123, 0.049215898, -0.029984508, 0.1023733, 0.020686282, 0.09276498, 0.06594465, 0.040306967, 0.039646838, 0.024893263, 0.019985713, -0.007490146, -0.06475739, 0.0039775046, -0.093131796, 0.019208899, -0.07733783, -0.020203479, 0.006769138, -0.0119414, -0.101915605, 0.040979926, 0.02510542, -0.054151278, 0.06190831, -0.055345394, -0.016889444, -0.014048992, 0.05633878, 0.0014443939, -0.057557303, 0.008132119, -0.0767353, 0.07406035, -0.00045199654, 2.0673118e-33, -0.053274818, 0.011906767, -0.076881476, 0.054513868, -0.05493527, -0.030032085, 0.0091717625, 0.029608516, 0.04764212, 0.075494505, -0.060944293, -0.070002794, -0.017954526, -0.0002697261, -0.019702464, -0.044075232, 0.034782697, 0.009780018, -0.027372668, -0.050324038, 0.04719326, 0.121900074, -0.03576134, -0.019872487, -0.020607674, 0.036174648, -0.08852886, 0.06155783, 0.025261035, -0.025936391, -0.0009306401, -0.046683837, -0.05014368, 0.10812697, -0.037831176, 0.07381164, -0.033247184, -0.06730712, 0.014299159, -0.0008647749, -0.0072271535, -0.069379136, -0.044634413, 0.06283378, -0.011130641, -0.045245998, 0.012946221, 0.027066223, 0.022456378, -0.0506204, 0.06533885, 0.049328446, -0.0067236284, -0.08606782, -0.06249258, 0.016606944, 0.07304179, -0.021817626, -0.13224809, 0.039714903, -0.04208266, -0.0074384483, 0.04510206, 0.005540187, -0.018190024, 0.032855798, 0.06135016, 0.023113068, 0.020625139, -0.12001194, 0.13601935, -0.011898094, -0.037874773, 0.033783548, -0.05537551, -0.022897676, 0.0024611359, 0.026888266, -0.043544162, -0.02143423, -0.029545162, -0.06355297, 0.036895126, -0.037896123, -0.050937623, 0.049345355, 0.038685326, -0.064620815, -0.015599044, 0.03428253, -0.111693606, -0.010725073, -0.05444826, 0.01115321, -0.07476044, -1.3226437e-08, -0.059653554, 0.0030007567, 0.10880834, 0.018097302, 0.005239667, -0.020124692, -0.03631588, 0.06468828, -0.02091637, 0.02433773, -0.03633735, -0.019036822, 0.059404828, 0.1129809, 0.0783728, 0.04163864, -0.008994734, 0.047046375, -0.013035781, -0.039637353, 0.09686411, 0.038924087, -0.010866471, -0.0009095914, 0.06247989, -0.059262555, -0.025755284, -0.031597372, -0.040879555, 0.10748236, -0.031564698, 0.05712449, 0.0535968, 0.030699957, -0.017963951, -0.066847555, 0.06662619, -0.027099319, -0.04021866, -0.08537387, -0.030460939, 0.12107883, -0.049966626, -0.005417998, 0.0018616703, -0.04779017, -0.016669726, -0.041905105, 0.06726177, -0.01954298, 0.05104534, 0.0071537616, 0.06522403, 0.028720086, 0.07001899, -0.015427566, 0.025104193, -0.05243522, -0.026481943, 0.061925348, 0.034436848, -0.057317927, 0.05694909, -0.017966846
])